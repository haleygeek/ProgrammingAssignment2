{
    "collab_server" : "",
    "contents" : "\n## This script takes advantage of the scoping rules of R to calculate the inverse \n## of a matrix. The inverted matrix is cached until a change has been made to it, \n## so that the inversion is not performed repeatedly, thus saving time.  \n\n\n## makeCacheMatrix creates a special matrix object that can cache its inverse\n\nmakeCacheMatrix <- function(x = matrix()) {   \n  \n  stored <- NULL          \n  \n  set <- function (y){    \n    x <<- y           \n    stored <<- NULL   \n  }\n  \n  get <- function () x    \n  setStored <- function (solved) stored <<- solved    \n  getStored <- function () stored        \n  list (set = set, get = get, setStored = setStored, getStored = getStored) \n}\n\n\n## cacheSolve computes the inverse of the special matrix returned by \n## makeCacheMatrix, sends the inverse to be cached, and retrieves the \n## cached inverse.\n\ncacheSolve <- function(x, ...) {                                   \n  \n  \n  ## Return a matrix that is the inverse of 'x'\n  solved <- x$getStored()                                         \n  \n  if (!is.null(solved)) {                 \n    message (\"getting cached data\")\n    return(solved)                  \n  } else {                                \n    \n    unsolved <- x$get()               \n    solved <- solve(unsolved, ...)    \n    x$setStored(solved)               \n  }\n  solved\n}\n\n\n",
    "created" : 1500003650509.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1046737402",
    "id" : "C776FE45",
    "lastKnownWriteTime" : 1500003851,
    "last_content_update" : 1500003851868,
    "path" : "D:/Dropbox/Sync Coding Computers/Data Science Specialization/R Programming/Classwork/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}