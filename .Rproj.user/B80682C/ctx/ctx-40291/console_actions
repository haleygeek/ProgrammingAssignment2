{
    "data" : [
        "\nR version 3.4.0 (2017-04-21) -- \"You Stupid Darkness\"\nCopyright (C) 2017 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "[Workspace loaded from D:/Dropbox/Sync Coding Computers/Data Science Specialization/R Programming/Classwork/.RData]\n\n",
        "> ",
        "cc <- complete(\"specdata\", 54)",
        "> ",
        "print(cc$nobs)",
        "$nobs\n[1] 219\n\n",
        "> ",
        "set.seed(42)",
        "> ",
        "cc <- complete(\"specdata\", 332:1)",
        "> ",
        "use <- sample(332, 10)",
        "> ",
        "print(cc[use, \"nobs\"])",
        "[[1]]\n[1] 711\n\n[[2]]\n[1] 135\n\n[[3]]\n[1] 74\n\n[[4]]\n[1] 445\n\n[[5]]\n[1] 178\n\n[[6]]\n[1] 73\n\n[[7]]\n[1] 49\n\n[[8]]\n[1] 0\n\n[[9]]\n[1] 687\n\n[[10]]\n[1] 237\n\n",
        "> ",
        "cr <- corr(\"specdata\")                ",
        "Error in corr(\"specdata\") : object 'r2' not found\n",
        "> ",
        "cr <- sort(cr)                ",
        "> ",
        "set.seed(868)                ",
        "> ",
        "out <- round(cr[sample(length(cr), 5)], 4)",
        "Error in sample.int(length(x), size, replace, prob) : \n  cannot take a sample larger than the population when 'replace = FALSE'\n",
        "> ",
        "print(out)",
        "Error in print(out) : object 'out' not found\n",
        "> ",
        "cr <- corr(\"specdata\")                ",
        "Error in corr(\"specdata\") : object 'r2' not found\n",
        "> ",
        "cr <- sort(cr)                ",
        "> ",
        "set.seed(868)                ",
        "> ",
        "out <- round(cr[sample(length(cr), 5)], 4)",
        "Error in sample.int(length(x), size, replace, prob) : \n  cannot take a sample larger than the population when 'replace = FALSE'\n",
        "> ",
        "print(out)",
        "Error in print(out) : object 'out' not found\n",
        "> ",
        "source(\"corr.R\")",
        "> ",
        "cleanr2 <- vector(mode = \"numeric\", length = 0)",
        "> ",
        "cr <- corr(\"specdata\")                ",
        "> ",
        "cr <- sort(cr)                ",
        "> ",
        "set.seed(868)                ",
        "> ",
        "out <- round(cr[sample(length(cr), 5)], 4)",
        "> ",
        "print(out)",
        "[1]  0.2688  0.1127 -0.0085  0.4586  0.0447\n",
        "> ",
        "cr <- corr(\"specdata\", 129)                ",
        "> ",
        "cr <- sort(cr)                ",
        "> ",
        "n <- length(cr)                ",
        "> ",
        "set.seed(197)                ",
        "> ",
        "out <- c(n, round(cr[sample(n, 5)], 4))",
        "> ",
        "print(out)",
        "[1] 243.0000   0.2540   0.0504  -0.1462  -0.1680   0.5969\n",
        "> ",
        "",
        "> ",
        "cr <- corr(\"specdata\", 2000)                ",
        "> ",
        "n <- length(cr)                ",
        "> ",
        "cr <- corr(\"specdata\", 1000)                ",
        "> ",
        "cr <- sort(cr)",
        "> ",
        "print(c(n, round(cr, 4)))",
        "[1]  0.0000 -0.0190  0.0419  0.1901\n",
        "> ",
        "?colmeans",
        "No documentation for ‘colmeans’ in specified packages and libraries:\nyou could try ‘??colmeans’\n",
        "> ",
        "?colMeans",
        "> ",
        "?cat()",
        "> ",
        "library(datasets)",
        "> ",
        "data(iris)",
        "> ",
        "?iris",
        "> ",
        "lapply(iris$Sepal.Length,mean)",
        "[[1]]\n[1] 5.1\n\n[[2]]\n[1] 4.9\n\n[[3]]\n[1] 4.7\n\n[[4]]\n[1] 4.6\n\n[[5]]\n[1] 5\n\n[[6]]\n[1] 5.4\n\n[[7]]\n[1] 4.6\n\n[[8]]\n[1] 5\n\n[[9]]\n[1] 4.4\n\n[[10]]\n[1] 4.9\n\n[[11]]\n[1] 5.4\n\n[[12]]\n[1] 4.8\n\n[[13]]\n[1] 4.8\n\n[[14]]\n[1] 4.3\n\n[[15]]\n[1] 5.8\n\n[[16]]\n[1] 5.7\n\n[[17]]\n[1] 5.4\n\n[[18]]\n[1] 5.1\n\n[[19]]\n[1] 5.7\n\n[[20]]\n[1] 5.1\n\n[[21]]\n[1] 5.4\n\n[[22]]\n[1] 5.1\n\n[[23]]\n[1] 4.6\n\n[[24]]\n[1] 5.1\n\n[[25]]\n[1] 4.8\n\n[[26]]\n[1] 5\n\n[[27]]\n[1] 5\n\n[[28]]\n[1] 5.2\n\n[[29]]\n[1] 5.2\n\n[[30]]\n[1] 4.7\n\n[[31]]\n[1] 4.8\n\n[[32]]\n[1] 5.4\n\n[[33]]\n[1] 5.2\n\n[[34]]\n",
        "[1] 5.5\n\n[[35]]\n[1] 4.9\n\n[[36]]\n[1] 5\n\n[[37]]\n[1] 5.5\n\n[[38]]\n[1] 4.9\n\n[[39]]\n[1] 4.4\n\n[[40]]\n[1] 5.1\n\n[[41]]\n[1] 5\n\n[[42]]\n[1] 4.5\n\n[[43]]\n[1] 4.4\n\n[[44]]\n[1] 5\n\n[[45]]\n[1] 5.1\n\n[[46]]\n[1] 4.8\n\n[[47]]\n[1] 5.1\n\n[[48]]\n[1] 4.6\n\n[[49]]\n[1] 5.3\n\n[[50]]\n[1] 5\n\n[[51]]\n[1] 7\n\n[[52]]\n[1] 6.4\n\n[[53]]\n[1] 6.9\n\n[[54]]\n[1] 5.5\n\n[[55]]\n[1] 6.5\n\n[[56]]\n[1] 5.7\n\n[[57]]\n[1] 6.3\n\n[[58]]\n[1] 4.9\n\n[[59]]\n[1] 6.6\n\n[[60]]\n[1] 5.2\n\n[[61]]\n[1] 5\n\n[[62]]\n[1] 5.9\n\n[[63]]\n[1] 6\n\n[[64]]\n[1] 6.1\n\n[[65]]\n[1] 5.6\n\n[[66]]\n[1] 6.7\n\n[[67]]\n",
        "[1] 5.6\n\n[[68]]\n[1] 5.8\n\n[[69]]\n[1] 6.2\n\n[[70]]\n[1] 5.6\n\n[[71]]\n[1] 5.9\n\n[[72]]\n[1] 6.1\n\n[[73]]\n[1] 6.3\n\n[[74]]\n[1] 6.1\n\n[[75]]\n[1] 6.4\n\n[[76]]\n[1] 6.6\n\n[[77]]\n[1] 6.8\n\n[[78]]\n[1] 6.7\n\n[[79]]\n[1] 6\n\n[[80]]\n[1] 5.7\n\n[[81]]\n[1] 5.5\n\n[[82]]\n[1] 5.5\n\n[[83]]\n[1] 5.8\n\n[[84]]\n[1] 6\n\n[[85]]\n[1] 5.4\n\n[[86]]\n[1] 6\n\n[[87]]\n[1] 6.7\n\n[[88]]\n[1] 6.3\n\n[[89]]\n[1] 5.6\n\n[[90]]\n[1] 5.5\n\n[[91]]\n[1] 5.5\n\n[[92]]\n[1] 6.1\n\n[[93]]\n[1] 5.8\n\n[[94]]\n[1] 5\n\n[[95]]\n[1] 5.6\n\n[[96]]\n[1] 5.7\n\n[[97]]\n[1] 5.7\n\n[[98]]\n[1] 6.2\n\n[[99]]\n[1] 5.1\n",
        "\n[[100]]\n[1] 5.7\n\n[[101]]\n[1] 6.3\n\n[[102]]\n[1] 5.8\n\n[[103]]\n[1] 7.1\n\n[[104]]\n[1] 6.3\n\n[[105]]\n[1] 6.5\n\n[[106]]\n[1] 7.6\n\n[[107]]\n[1] 4.9\n\n[[108]]\n[1] 7.3\n\n[[109]]\n[1] 6.7\n\n[[110]]\n[1] 7.2\n\n[[111]]\n[1] 6.5\n\n[[112]]\n[1] 6.4\n\n[[113]]\n[1] 6.8\n\n[[114]]\n[1] 5.7\n\n[[115]]\n[1] 5.8\n\n[[116]]\n[1] 6.4\n\n[[117]]\n[1] 6.5\n\n[[118]]\n[1] 7.7\n\n[[119]]\n[1] 7.7\n\n[[120]]\n[1] 6\n\n[[121]]\n[1] 6.9\n\n[[122]]\n[1] 5.6\n\n[[123]]\n[1] 7.7\n\n[[124]]\n[1] 6.3\n\n[[125]]\n[1] 6.7\n\n[[126]]\n[1] 7.2\n\n[[127]]\n[1] 6.2\n\n[[128]]\n[1] 6.1\n\n[[129]]\n[1] 6.4\n\n[[130]]\n",
        "[1] 7.2\n\n[[131]]\n[1] 7.4\n\n[[132]]\n[1] 7.9\n\n[[133]]\n[1] 6.4\n\n[[134]]\n[1] 6.3\n\n[[135]]\n[1] 6.1\n\n[[136]]\n[1] 7.7\n\n[[137]]\n[1] 6.3\n\n[[138]]\n[1] 6.4\n\n[[139]]\n[1] 6\n\n[[140]]\n[1] 6.9\n\n[[141]]\n[1] 6.7\n\n[[142]]\n[1] 6.9\n\n[[143]]\n[1] 5.8\n\n[[144]]\n[1] 6.8\n\n[[145]]\n[1] 6.7\n\n[[146]]\n[1] 6.7\n\n[[147]]\n[1] 6.3\n\n[[148]]\n[1] 6.5\n\n[[149]]\n[1] 6.2\n\n[[150]]\n[1] 5.9\n\n",
        "> ",
        "",
        "> ",
        "spLength <- iris$Sepal.Length",
        "> ",
        "sapply(spLength,mean)",
        "  [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 5.7 5.1 5.4 5.1\n [23] 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0\n [45] 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7\n [67] 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3\n [89] 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2\n[111] 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0",
        " 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9\n[133] 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "c(spLength) <- iris$Sepal.Length",
        "Error in c(spLength) <- iris$Sepal.Length : could not find function \"c<-\"\n",
        "> ",
        "",
        "> ",
        "spLength <- list(iris$Sepal.Length)",
        "> ",
        "sapply(spLengthh)",
        "Error in match.fun(FUN) : argument \"FUN\" is missing, with no default\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "spLength <- iris$Sepal.Length",
        "> ",
        "class(iris$Sepal.Length)",
        "[1] \"numeric\"\n",
        "> ",
        "sapply(spLengthh)",
        "Error in match.fun(FUN) : argument \"FUN\" is missing, with no default\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "spLength <- iris$Sepal.Length",
        "> ",
        "apply(spLengthh)",
        "Error in match.fun(FUN) : argument \"FUN\" is missing, with no default\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "tapply(iris$Sepal.Length, mean)",
        "Error in unique.default(x, nmax = nmax) : \n  unique() applies only to vectors\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "apply(iris$Sepal.Length, mean)",
        "Error in match.fun(FUN) : argument \"FUN\" is missing, with no default\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "apply(iris$Sepal.Length, 2, mean)",
        "Error in apply(iris$Sepal.Length, 2, mean) : \n  dim(X) must have a positive length\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "apply(iris$Sepal.Length, mean, 2)",
        "Error in match.fun(FUN) : '2' is not a function, character or symbol\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "apply(iris$Sepal.Length, 2, mean)",
        "Error in apply(iris$Sepal.Length, 2, mean) : \n  dim(X) must have a positive length\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "class(iris)",
        "[1] \"data.frame\"\n",
        "> ",
        "apply(iris$Sepal.Length, 2, mean)",
        "Error in apply(iris$Sepal.Length, 2, mean) : \n  dim(X) must have a positive length\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "apply(as.matrix(iris$Sepal.Length, 2, mean))",
        "Error in match.fun(FUN) : argument \"FUN\" is missing, with no default\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "apply(as.matrix(iris$Sepal.Length), 2, mean)",
        "[1] 5.843333\n",
        "> ",
        "",
        "> ",
        "View(iris)",
        "> ",
        "rowMeans(iris[, 1:4])",
        "  [1] 2.550 2.375 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500 2.325 2.125 2.800\n [16] 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350 2.650 2.575 2.450 2.600 2.600 2.550 2.425\n [31] 2.425 2.675 2.725 2.825 2.425 2.400 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800\n [46] 2.375 2.675 2.350 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300\n [61] 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600 3.275 3.925 3.550 3.800 3.700 3.725\n [76] 3.850 3.950 4.100 3.725 3.200",
        " 3.200 3.150 3.400 3.850 3.600 3.875 4.000 3.575 3.500 3.325\n [91] 3.425 3.775 3.400 2.900 3.450 3.525 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375\n[106] 4.825 3.400 4.575 4.200 4.850 4.200 4.075 4.350 3.800 4.025 4.300 4.200 5.100 4.875 3.675\n[121] 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025 4.250 3.925 3.925\n[136] 4.775 4.425 4.200 3.900 4.375 4.450 4.350 3.875 4.550 4.550 4.300 3.925 4.175 4.325 3.950\n",
        "> ",
        "apply(iris, 2, mean)",
        "Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species \n          NA           NA           NA           NA           NA \n",
        "Warning messages:\n",
        "1: ",
        "In mean.default(newX[, i], ...) :",
        "\n ",
        " argument is not numeric or logical: returning NA\n",
        "2: ",
        "In mean.default(newX[, i], ...) :",
        "\n ",
        " argument is not numeric or logical: returning NA\n",
        "3: ",
        "In mean.default(newX[, i], ...) :",
        "\n ",
        " argument is not numeric or logical: returning NA\n",
        "4: ",
        "In mean.default(newX[, i], ...) :",
        "\n ",
        " argument is not numeric or logical: returning NA\n",
        "5: ",
        "In mean.default(newX[, i], ...) :",
        "\n ",
        " argument is not numeric or logical: returning NA\n",
        "> ",
        "apply(iris[, 1:4], 2, mean)",
        "Sepal.Length  Sepal.Width Petal.Length  Petal.Width \n    5.843333     3.057333     3.758000     1.199333 \n",
        "> ",
        "library(datasets)",
        "> ",
        "data(mtcars)",
        "> ",
        "?mtcars",
        "> ",
        "?with",
        "> ",
        "sapply(split(mtcars$mpg, mtcars$cyl), mean)",
        "       4        6        8 \n26.66364 19.74286 15.10000 \n",
        "> ",
        "with(mtcars, tapply(mpg, cyl, mean))",
        "       4        6        8 \n26.66364 19.74286 15.10000 \n",
        "> ",
        "tapply(mtcars$mpg, mtcars$cyl, mean)",
        "       4        6        8 \n26.66364 19.74286 15.10000 \n",
        "> ",
        "sapply(mtcars, cyl, mean)",
        "Error in match.fun(FUN) : object 'cyl' not found\n",
        "> ",
        "tapply(mtcars$cyl, mtcars$mpg, mean)",
        "10.4 13.3 14.3 14.7   15 15.2 15.5 15.8 16.4 17.3 17.8 18.1 18.7 19.2 19.7   21 21.4 21.5 22.8 \n   8    8    8    8    8    8    8    8    8    8    6    6    8    7    6    6    5    4    4 \n24.4   26 27.3 30.4 32.4 33.9 \n   4    4    4    4    4    4 \n",
        "> ",
        "lapply(mtcars, mean)",
        "$mpg\n[1] 20.09062\n\n$cyl\n[1] 6.1875\n\n$disp\n[1] 230.7219\n\n$hp\n[1] 146.6875\n\n$drat\n[1] 3.596563\n\n$wt\n[1] 3.21725\n\n$qsec\n[1] 17.84875\n\n$vs\n[1] 0.4375\n\n$am\n[1] 0.40625\n\n$gear\n[1] 3.6875\n\n$carb\n[1] 2.8125\n\n",
        "> ",
        "mean(mtcars$mpg, mtcars$cyl)",
        "Error in mean.default(mtcars$mpg, mtcars$cyl) : \n  'trim' must be numeric of length one\n",
        "> ",
        "apply(mtcars, 2, mean)",
        "       mpg        cyl       disp         hp       drat         wt       qsec         vs \n 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750   0.437500 \n        am       gear       carb \n  0.406250   3.687500   2.812500 \n",
        "> ",
        "split(mtcars, mtcars$cyl)",
        "$`4`\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70",
        " 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n$`6`\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive",
        " 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nValiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n\n$`8`\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nDuster 360          14.3   8 360.0 245 3.21",
        " 3.570 15.84  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87",
        "  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n\n",
        "> ",
        "?dif",
        "No documentation for ‘dif’ in specified packages and libraries:\nyou could try ‘??dif’\n",
        "> ",
        "?diff",
        "> ",
        "tapply(mtcars$hp,mtcars$cyl,diff)",
        "$`4`\n [1] -31  33 -29 -14  13  32 -31  25  22  -4\n\n$`6`\n[1]  0  0 -5 18  0 52\n\n$`8`\n [1]  70 -65   0   0  25  10  15 -80   0  95 -70  89  71\n\n",
        "> ",
        "tapply(mtcars$hp,mtcars$cyl,mean)",
        "        4         6         8 \n 82.63636 122.28571 209.21429 \n",
        "> ",
        "means <- tapply(mtcars$hp,mtcars$cyl,mean)",
        "> ",
        "lapply(means, function (x) (means$8-means$4))",
        "Error: unexpected numeric constant in \"lapply(means, function (x) (means$8\"\n",
        "> ",
        "lapply(means, function (x) (means[[3]]-means$4[[1]]))",
        "Error: unexpected numeric constant in \"lapply(means, function (x) (means[[3]]-means$4\"\n",
        "> ",
        "class(means)",
        "[1] \"array\"\n",
        "> ",
        "lapply(means, function (x) (means[3]-means$4[1]))",
        "Error: unexpected numeric constant in \"lapply(means, function (x) (means[3]-means$4\"\n",
        "> ",
        "means$4",
        "Error: unexpected numeric constant in \"means$4\"\n",
        "> ",
        "means",
        "        4         6         8 \n 82.63636 122.28571 209.21429 \n",
        "> ",
        "means[1]",
        "       4 \n82.63636 \n",
        "> ",
        "lapply(means, function (x) (means[3]-means[1])",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        ")",
        "$`4`\n       8 \n126.5779 \n\n$`6`\n       8 \n126.5779 \n\n$`8`\n       8 \n126.5779 \n\n",
        "> ",
        "lapply(means, function (x) (means[3]-means[1]))",
        "$`4`\n       8 \n126.5779 \n\n$`6`\n       8 \n126.5779 \n\n$`8`\n       8 \n126.5779 \n\n",
        "> ",
        "View(mtcars)",
        "> ",
        "View(mtcars)",
        "> ",
        "View(mtcars)",
        "> ",
        "means <- tapply(mtcars$hp,mtcars$cyl,mean)",
        "> ",
        "lapply(means, function (x) (means[3]-means[1]))",
        "$`4`\n       8 \n126.5779 \n\n$`6`\n       8 \n126.5779 \n\n$`8`\n       8 \n126.5779 \n\n",
        "> ",
        "means",
        "        4         6         8 \n 82.63636 122.28571 209.21429 \n",
        "> ",
        "debug(1s)",
        "Error: unexpected symbol in \"debug(1s\"\n",
        "> ",
        "debug(ls)",
        "> ",
        "debug(ls)",
        "> ",
        "ls",
        "function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, \n    pattern, sorted = TRUE) \n{\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n",
        "    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n",
        "            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n<bytecode: 0x000000000a4ef430>\n<environment: namespace:base>\n",
        "> ",
        "?debug",
        "debugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n",
        "        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n",
        "        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n",
        "    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n",
        "            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n",
        "        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n",
        "                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n",
        "                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n",
        "                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n",
        "            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n",
        "            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n",
        "            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n",
        "            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n",
        "Browse[2]> ",
        "tapply(iris$Sepal.Length, iris$Species, mean)",
        "    setosa versicolor  virginica \n     5.006      5.936      6.588 \n",
        "Browse[2]> ",
        "",
        "debug: if (!missing(name)) {\n    pos <- tryCatch(name, error = function(e) e)\n    if (inherits(pos, \"error\")) {\n        name <- substitute(name)\n        if (!is.character(name)) \n            name <- deparse(name)\n        warning(gettextf(\"%s converted to character string\", \n            sQuote(name)), domain = NA)\n        pos <- name\n    }\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n",
        "            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n",
        "                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n",
        "        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n",
        "            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n",
        "Browse[2]> ",
        "debug",
        "function (fun, text = \"\", condition = NULL, signature = NULL) \n{\n    if (is.null(signature)) \n        .Internal(debug(fun, text, condition))\n    else if (requireNamespace(\"methods\")) \n        methods::.debugMethod(fun, text, condition, signature, \n            once = FALSE)\n    else stop(\"failed to load the methods package for debugging by signature\")\n}\n<bytecode: 0x0000000002c8cfc8>\n<environment: namespace:base>\n",
        "Browse[2]> ",
        "exit",
        "Error: object 'exit' not found\n",
        "Browse[2]> ",
        "\n",
        "Error: target context is not on the stack\n",
        "debugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n",
        "        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n",
        "        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n",
        "    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n",
        "            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n",
        "        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n",
        "                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n",
        "                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n",
        "                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n",
        "            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n",
        "            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n",
        "            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n",
        "            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n",
        "            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n",
        "            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n",
        "Browse[2]> ",
        "browser",
        "function (text = \"\", condition = NULL, expr = TRUE, skipCalls = 0L)  .Primitive(\"browser\")\n",
        "Browse[2]> ",
        "Q",
        "Browse[2]> ",
        "",
        "debug: if (!missing(name)) {\n    pos <- tryCatch(name, error = function(e) e)\n    if (inherits(pos, \"error\")) {\n        name <- substitute(name)\n        if (!is.character(name)) \n            name <- deparse(name)\n        warning(gettextf(\"%s converted to character string\", \n            sQuote(name)), domain = NA)\n        pos <- name\n    }\n}\n",
        "Browse[2]> ",
        "Q",
        "Browse[2]> ",
        "",
        "debug: if (!missing(name)) {\n    pos <- tryCatch(name, error = function(e) e)\n    if (inherits(pos, \"error\")) {\n        name <- substitute(name)\n        if (!is.character(name)) \n            name <- deparse(name)\n        warning(gettextf(\"%s converted to character string\", \n            sQuote(name)), domain = NA)\n        pos <- name\n    }\n}\n",
        "Browse[2]> ",
        "f",
        "exiting from: ls(pos = i, all.names = TRUE)\ndebugging in: ls(pos = i, all.names = TRUE)\ndebug: {\n    if (!missing(name)) {\n        pos <- tryCatch(name, error = function(e) e)\n        if (inherits(pos, \"error\")) {\n            name <- substitute(name)\n            if (!is.character(name)) \n                name <- deparse(name)\n            warning(gettextf(\"%s converted to character string\", \n                sQuote(name)), domain = NA)\n            pos <- name\n        }\n    }\n    all.names <- .Internal(ls(envir, all.names, sorted))\n",
        "    if (!missing(pattern)) {\n        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && \n            ll != length(grep(\"]\", pattern, fixed = TRUE))) {\n            if (pattern == \"[\") {\n                pattern <- \"\\\\[\"\n                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")\n            }\n            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {\n                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)\n                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")\n",
        "            }\n        }\n        grep(pattern, all.names, value = TRUE)\n    }\n    else all.names\n}\n\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        3,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2
    ]
}